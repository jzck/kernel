var searchIndex = {};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style bitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["bluesnow"] = {"doc":"project hosted at (https://github.com/jzck/kernel)","items":[[5,"kmain","bluesnow","",null,null],[5,"eh_personality","","",null,{"inputs":[],"output":null}],[5,"panic_fmt","","",null,null],[0,"vga","","80x25 screen and simplistic terminal driver",null,null],[3,"Writer","bluesnow::vga","",null,null],[12,"buffer_pos","","",0,null],[12,"color_code","","",0,null],[5,"print","","",null,{"inputs":[{"name":"arguments"}],"output":null}],[0,"color","","",null,null],[3,"ColorCode","bluesnow::vga::color","",null,null],[12,"0","","",1,null],[4,"Color","","",null,null],[13,"Black","","",2,null],[13,"Blue","","",2,null],[13,"Green","","",2,null],[13,"Cyan","","",2,null],[13,"Red","","",2,null],[13,"Magenta","","",2,null],[13,"Brown","","",2,null],[13,"LightGray","","",2,null],[13,"DarkGray","","",2,null],[13,"LightBlue","","",2,null],[13,"LightGreen","","",2,null],[13,"LightCyan","","",2,null],[13,"LightRed","","",2,null],[13,"Pink","","",2,null],[13,"Yellow","","",2,null],[13,"White","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"colorcode"}}],[11,"new","","",1,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"colorcode"}}],[11,"new","bluesnow::vga","",0,{"inputs":[],"output":{"name":"writer"}}],[11,"prompt","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"backspace","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"keypress","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"erase_byte","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"write_byte","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"write_str","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[0,"context","bluesnow","kernel init and environment",null,null],[3,"Context","bluesnow::context","",null,null],[12,"current_term","","",3,null],[12,"vga1","","",3,null],[12,"vga2","","",3,null],[7,"CONTEXT","","",null,null],[11,"switch_term","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"current_term","","",3,{"inputs":[{"name":"self"}],"output":{"name":"writer"}}],[0,"keyboard","bluesnow","PS/2 detection and processing",null,null],[5,"kbd_callback","bluesnow::keyboard","",null,{"inputs":[],"output":null}],[0,"console","bluesnow","simplisitc kernel commands",null,null],[5,"reboot","bluesnow::console","Reboot the kernel",null,{"inputs":[],"output":null}],[5,"shutdown","","Shutdown the kernel",null,null],[5,"print_kernel_stack","","Print the kernel stack",null,{"inputs":[],"output":null}],[0,"cpuio","bluesnow","wrappers around the x86-family I/O instructions.",null,null],[5,"inb","bluesnow::cpuio","Read a `u8`-sized value from `port`.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u8"}}],[5,"outb","","Write a `u8`-sized `value` to `port`.",null,{"inputs":[{"name":"u8"},{"name":"u16"}],"output":null}],[5,"inw","","Read a `u16`-sized value from `port`.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u16"}}],[5,"outw","","Write a `u8`-sized `value` to `port`.",null,{"inputs":[{"name":"u16"},{"name":"u16"}],"output":null}],[5,"inl","","Read a `u32`-sized value from `port`.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"outl","","Write a `u32`-sized `value` to `port`.",null,{"inputs":[{"name":"u32"},{"name":"u16"}],"output":null}],[5,"halt","","",null,null]],"paths":[[3,"Writer"],[3,"ColorCode"],[4,"Color"],[3,"Context"]]};
searchIndex["multiboot2"] = {"doc":"","items":[[3,"BootLoaderNameTag","multiboot2","",null,null],[3,"ElfSectionsTag","","",null,null],[12,"number_of_sections","","",0,null],[3,"ElfSection","","",null,null],[12,"flags","","",1,null],[12,"addr","","",1,null],[12,"size","","",1,null],[3,"ElfSectionIter","","",null,null],[3,"ElfSectionFlags","","",null,null],[3,"MemoryMapTag","","",null,null],[3,"MemoryArea","","",null,null],[12,"base_addr","","",2,null],[12,"length","","",2,null],[3,"MemoryAreaIter","","",null,null],[3,"ModuleTag","","",null,null],[3,"BootInformation","","",null,null],[12,"total_size","","",3,null],[4,"ElfSectionType","","",null,null],[13,"Unused","","",4,null],[13,"ProgramSection","","",4,null],[13,"LinkerSymbolTable","","",4,null],[13,"StringTable","","",4,null],[13,"RelaRelocation","","",4,null],[13,"SymbolHashTable","","",4,null],[13,"DynamicLinkingTable","","",4,null],[13,"Note","","",4,null],[13,"Uninitialized","","",4,null],[13,"RelRelocation","","",4,null],[13,"Reserved","","",4,null],[13,"DynamicLoaderSymbolTable","","",4,null],[5,"load","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"bootinformation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sections","","",0,{"inputs":[{"name":"self"}],"output":{"name":"elfsectioniter"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"elfsectioniter"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["elfsection"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_address","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end_address","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"flags","","",1,{"inputs":[{"name":"self"}],"output":{"name":"elfsectionflags"}}],[11,"is_allocated","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"elfsectionflags"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"elfsectionflags"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"elfsectionflags"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"elfsectionflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"elfsectionflags"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"elfsectionflags"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"elfsectionflags"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"elfsectionflags"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"elfsectionflags"}],"output":{"name":"ordering"}}],[11,"hash","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",7,{"inputs":[],"output":{"name":"elfsectionflags"}}],[11,"all","","Returns the set containing all flags.",7,{"inputs":[],"output":{"name":"elfsectionflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",7,{"inputs":[{"name":"u64"}],"output":{"generics":["elfsectionflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",7,{"inputs":[{"name":"u64"}],"output":{"name":"elfsectionflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",7,{"inputs":[{"name":"self"},{"name":"elfsectionflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",7,{"inputs":[{"name":"self"},{"name":"elfsectionflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",7,{"inputs":[{"name":"self"},{"name":"elfsectionflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",7,{"inputs":[{"name":"self"},{"name":"elfsectionflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",7,{"inputs":[{"name":"self"},{"name":"elfsectionflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",7,{"inputs":[{"name":"self"},{"name":"elfsectionflags"}],"output":{"name":"elfsectionflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",7,{"inputs":[{"name":"self"},{"name":"elfsectionflags"}],"output":{"name":"elfsectionflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",7,{"inputs":[{"name":"self"},{"name":"elfsectionflags"}],"output":{"name":"elfsectionflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",7,{"inputs":[{"name":"self"},{"name":"elfsectionflags"}],"output":{"name":"elfsectionflags"}}],[11,"not","","Returns the complement of this set of flags.",7,{"inputs":[{"name":"self"}],"output":{"name":"elfsectionflags"}}],[11,"from_iter","","",7,{"inputs":[{"name":"t"}],"output":{"name":"elfsectionflags"}}],[11,"memory_areas","","",8,{"inputs":[{"name":"self"}],"output":{"name":"memoryareaiter"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"memoryareaiter"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["memoryarea"],"name":"option"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"start_address","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"end_address","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[17,"ELF_SECTION_WRITABLE","","",null,null],[17,"ELF_SECTION_ALLOCATED","","",null,null],[17,"ELF_SECTION_EXECUTABLE","","",null,null],[11,"start_address","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end_address","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"elf_sections_tag","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["elfsectionstag"],"name":"option"}}],[11,"memory_map_tag","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["memorymaptag"],"name":"option"}}],[11,"module_tag","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["moduletag"],"name":"option"}}],[11,"boot_loader_name_tag","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["bootloadernametag"],"name":"option"}}]],"paths":[[3,"ElfSectionsTag"],[3,"ElfSection"],[3,"MemoryArea"],[3,"BootInformation"],[4,"ElfSectionType"],[3,"BootLoaderNameTag"],[3,"ElfSectionIter"],[3,"ElfSectionFlags"],[3,"MemoryMapTag"],[3,"MemoryAreaIter"],[3,"ModuleTag"]]};
searchIndex["rlibc"] = {"doc":"A bare-metal library supplying functions rustc may lower code to","items":[[5,"memcpy","rlibc","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"memcmp","","",null,null]],"paths":[]};
initSearch(searchIndex);
